---
id: gitref
title: Git-Github
---

::caution
The key *Iterative Development* technologies are [Git](#git) and [GitHub](#github).
:::




## Central Repository

The core of Iterative Development is the GitHub central repository controlled by a gatekeeper.

### GitHub

GitHub is a Distributed Version Control Systems  enabling multiple teams to work separately without having an impact on the work of others. GitHub manages a central online web hosted project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. Teams can view history of all changes and go back to previous file versions.

> It helps answer the questions *who changed what, where, when, and why?*

Team members use the Website Development Stack to develop and deploy websites to the Internet.

[GitHub - Managing an organization](https://git-scm.com/book/en/v2/GitHub-Managing-an-organization)


All team members have their own local copy of the GitHub central project repository. They make changes, fix defects, add new features to their repository, without interfering with others team members, or the central repository.

Team members cannot directly make changes to the central repository. They may deploy their copy of the repository with their changes, to a private Internet website for stakeholders to see and give feedback.

There would be confusion and possible defects created if Team members were to directly make changes to the GitHub project central repository.

A solution to this problem is to have the project central repository controlled by a gatekeeper.

[GitHub - Contributing to a Project](https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project#ch06-github_flow)

---

> Page 167
> GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects. A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things. So while it’s not a direct part of the Git open source project, there’s a good chance that you’ll want or need to interact with GitHub at some point while using Git professionally.
> 

---

> Page 173 
> The GitHub Flow
> GitHub is designed around a particular collaboration workflow, centered on Pull Requests. This flow works whether you’re collaborating with a tightly-knit team in a single shared repository, or a globally-distributed company or network of strangers contributing to a project through dozens of forks. It is centered on the Topic Branches workflow covered in Git Branching.
> Here’s how it generally works:
> 1. Fork the project.
> 1. Create a topic branch from master.
> 1. Make some commits to improve the project.
> 1. Push this branch to your GitHub project.
> 1. Open a Pull Request on GitHub.
> 1. Discuss, and optionally continue committing.
> 1. The project owner merges or closes the Pull Request.
> 1. Sync the updated master back to your fork.
> 

---

> Page 84
> Topic Branches
> Topic branches, however, are useful in projects of any size. A topic branch is a short-lived branch that you create and use for a single particular feature or related work. This is something you’ve likely never done with a VCS before because it’s generally too expensive to create and merge branches. But in Git it’s common to create, work on, merge, and delete branches several times a day.
>

>Page 126
This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems. The second developer must merge in the
 126
first one’s work before pushing changes up, so as not to overwrite the first developer’s changes. This concept is as true in Git as it is in Subversion (or any CVCS), and this model works perfectly well in Git.
> 

---

>Page 129 Contributing to a Project
The main difficulty with describing how to contribute to a project are the numerous variations on how to do that. Because Git is very flexible, people can and do work together in many ways, and it’s problematic to describe how you should contribute — every project is a bit different. Some of the variables involved are active contributor count, chosen workflow, your commit access, and possibly the external contribution method.
>

> Page 130
Commit Guidelines
Before we start looking at the specific use cases, here’s a quick note about commit messages. Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier. The Git project provides a document that lays out a number of good tips for creating commits from which to submit patches — you can read it in the Git source code in the Documentation/SubmittingPatches file.
>
First, your submissions should not contain any whitespace errors. Git provides an easy way to check for this — before you commit, run git diff --check, which identifies possible whitespace errors and lists them for you.
Figure 56. Output of git diff --check
If you run that command before committing, you can tell if you’re about to commit whitespace
issues that may annoy other developers.
>
Next, try to make each commit a logically separate changeset. If you can, try to make your changes digestible — don’t code for a whole weekend on five different issues and then submit them all as one massive commit on Monday. Even if you don’t commit during the weekend, use the staging area on Monday to split your work into at least one commit per issue, with a useful message per commit. If some of the changes modify the same file, try to use git add --patch to partially stage files (covered in detail in Interactive Staging). The project snapshot at the tip of the branch is identical whether you do one commit or five, as long as all the changes are added at some point, so try to make things easier on your fellow developers when they have to review your changes.
>
This approach also makes it easier to pull out or revert one of the changesets if you need to later. Rewriting History describes a number of useful Git tricks for rewriting history and interactively staging files — use these tools to help craft a clean and understandable history before sending the work to someone else.
The last thing to keep in mind is the commit message. Getting in the habit of creating quality commit messages makes using and collaborating with Git a lot easier. As a general rule, your messages should start with a single line that’s no more than about 50 characters and that describes the changeset concisely, followed by a blank line, followed by a more detailed explanation. The Git project requires that the more detailed explanation include your motivation for the change and contrast its implementation with previous behavior — this is a good guideline to follow. Write your commit message in the imperative: "Fix bug" and not "Fixed bug" or "Fixes bug." Here is a template you can follow, which we’ve lightly adapted from one [originally written by Tim Pope](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html):

> Capitalized, short (50 chars or less) summary
>   
> More detailed explanatory text, if necessary.  Wrap it to about 72 characters or so.  In some contexts, the first line is treated as the subject of an email and the rest of the text as the body.  The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase will confuse you if you run the two together.
> 
> Write your commit message in the imperative: "Fix bug" and not "Fixed bug". or "Fixes bug."  This convention matches up with commit messages generated by commands like git merge and git revert.
> 
> Further paragraphs come after blank lines.
- Bullet points are okay, too
- Typically a hyphen or asterisk is used for the bullet, followed by a single space, with blank lines in between, but conventions vary here
- Use a hanging indent
>

Page 144
Contributing to public projects is a bit different. Because you don’t have the permissions to directly update branches on the project, you have to get the work to the maintainers some other way. This first example describes contributing via forking on Git hosts that support easy forking. Many hosting sites support this (including GitHub, BitBucket, repo.or.cz, and others), and many project maintainers expect this style of contribution. The next section deals with projects that prefer to accept contributed patches via email.
First, you’ll probably want to clone the main repository, create a topic branch for the patch or patch 144
series you’re planning to contribute, and do your work there. The sequence looks basically like this:

```bash
  $ git clone <url>
  $ cd project
  $ git checkout -b featureA
    ... work ...
  $ git commit
    ... work ...
  $ git commit
```

---

> Page 152
> 
> Working with Topic Branches
> 
> Working in Topic Branches
> When you’re thinking of integrating new work, it’s generally a good idea to try it out in a topic branch — a temporary branch specifically made to try out that new work. This way, it’s easy to tweak a patch individually and leave it if it’s not working until you have time to come back to it. If you create a simple branch name based on the theme of the work you’re going to try, such as ruby_client or something similarly descriptive, you can easily remember it if you have to abandon it for a while and come back later. The maintainer of the Git project tends to namespace these branches as well — such as sc/ruby_client, where sc is short for the person who contributed the work. As you’ll remember, you can create the branch based off your master branch


> Page 167
> GitHub
> GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects. A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things. So while it’s not a direct part of the Git open source project, there’s a good chance that you’ll want or need to interact with GitHub at some point while using Git professionally.

### Git

Git is the most widely used file version control system that track file changes. It facilitates developing websites collaborative.

A Git project consists of three major sections: the local clone of the GitHub central repositorie, the staging area, and the GitHub project master repository.

Each team member ==[fork](glossary#fork)== a copy of the GitHub project central repository to their GetHub account and makes a clone of it on their workstation.

Files are created, edited, and delete in team members local repositories. The changes are staged, then committed to the team members GitHub repository.

- Each developer makes changes to their repository. They cannot directly make changes to the central repository.

	- Team members commit changes to their local repository.

	- They may deploy their local repository to a private Internet website for stakeholders to see and give feedback.  See [==Preview Deployments](glossary#preview-deployments)==

- The process is managed using [GitHub for Teams](https://github.com/team). When stakeholders determine developers changes, defect fixes, or new features are ready, a GitHub ==pull== request is made by developers to the central project repository.

	- Project team members and the gatekeeper are notified by GitHub of the ==[pull request](glossary#pull-request)== request. They may examine, comment on, suggest possible changes, and test the code.

	- When the team agrees on developers changes, they are committed to the central project repository by the gatekeeper. This process is repeated for each developer set of changes.

	- Iterations of the central project repository with developer changes may be deployed by the gatekeeper to a private website for stakeholders viewing.  See ==[Preview Deployments](glossary#preview-deployments)==

- Each developer pulls the central repository changes when the stakeholders agree that developers changes, defect fixes, or new features are functional, and commits them to their local repository of the central project. This process keeps team members up to date on changes, and individual team member testing will determine if the changes are compatible with the changes, defect fixes, or new features they are working on.

- The central project repository may be deployed to the public Internet by the gatekeeper after stakeholders agree there have been sufficient development and testing iterations.

---

### Commonly Used Git Commands

Using git is less complicated using VScode editor built-in git commands:

- Create a uniquely name branch for each fixing defect fixing, update changes, and creating new features. Commit a branch and request a pull request when work is completed on a branch.
- Project team members and the gatekeeper are notified by GitHub of the ==[pull request](glossary#pull-request)== request. They may examine, comment on, suggest possible changes, and test the code.
	
- Review diffs
	Review the differences between files being edited and files in the local project repository
- Stage files
	Staged files will be committed  - Make commits
	A comment is required that briefly describes why the staged files are being committed
- Push
	Commit the staged files to both the developers project local project and GitHub project repositories
- Pull
	The Git pull command is used to fetch and merge code changes from the remote repository to the local repository. Git pull is a combination of two commands, Git fetch followed by Git merge.


- Pull Request
	Request the GitHub project gatekeeper
	
> Note:
> To contribute to that project, you create your own public clone of the project and push your changes to it. Then, you can send a request to the maintainer of the main project to pull in your changes. The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
>
> Generate a request asking your upstream project to pull changes into their tree. The request, printed to the standard output, begins with the branch description, summarizes the changes and indicates from where they can be pulled.
>
> The upstream project is expected to have the commit named by \<start> and the output asks it to integrate the changes you made since that commit, up to the commit named by \<end>, by visiting the repository named by \<URL>.


Both GitHub and VScode are Microsoft applications. Git is an open source application.


When stakeholders determine some changes, defect fixes, or new features are ready, they will be committed to central project repository, and team members update their local copy by pulling central repository changes into their local repository. This process keeps team members up to date.

---





## Version Control

 revision control  tracks and provides control over changes to source code. Software developers sometimes use revision control software to maintain documentation and configuration files as well as source code.
As teams design, develop and deploy software, it is common for multiple versions of the same software to be deployed in different sites and for the software's developers to be working simultaneously on updates. Bugs or features of the software are often only present in certain versions (because of the fixing of some problems and the introduction of others as the program develops). Therefore, for the purposes of locating and fixing bugs, it is vitally important to be able to retrieve and run different versions of the software to determine in which version(s) the problem occurs. It may also be necessary to develop two versions of the software concurrently: for instance, where one version has bugs fixed, but no new features (branch), while the other version is where new features are worked on (trunk).
At the simplest level, developers could simply retain multiple copies of the different versions of the program, and label them appropriately. This simple approach has been used in many large software projects. While this method can work, it is inefficient as many near-identical copies of the program have to be maintained. This requires a lot of self-discipline on the part of developers and often leads to mistakes. Since the code base is the same, it also requires granting read-write-execute permission to a set of developers, and this adds the pressure of someone managing permissions so that the code base is not compromised, which adds more complexity. Consequently, systems to automate some or all of the revision control process have been developed. This ensures that the majority of management of version control steps is hidden behind the scenes.


## GitHub

- [GitHub](https://github.com/)

The main purpose of GitHub.com is to facilitate the version control and issue tracking aspects of software development. Labels, milestones, responsibility assignment, and a search engine are available for issue tracking. For version control, Git (and by extension GitHub.com) allows pull requests to propose changes to the source code. Users with the ability to review the proposed changes can see a diff of the requested changes and approve them. In Git terminology, this action is called "committing" and one instance of it is a "commit." A history of all commits is kept and can be viewed at a later time.

---

## Git

Git  is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).[8][9][10]

---

Git is the most widely used version control system that track file changes. It facilitates collaborate developing websites.

A Git project consists of three major sections: the local repositories, the staging area, and the GitHub project master repository.

Files are created, edited, and delete in team members local repositories. The changes are staged, then commited to the team members GitHub repository.



---

- [Git](https://git-scm.com/)

![gitlogo](/img/gitlogo.png)


# Git commands

Team project and individual project repositories are created and stored on GitHub.

The team remote repository is initially created by the gatekeeper
Some commonly used git commands are:

---

### Git Client

### VsCode Git Commands

VScode built-in git commands :
 - Review diffs,
 - Stage files
 - Make commits
 - Push
 - pull

---

### Fork App
Git repositories are fundamental to a project, I use [Fork APP](https://git-fork.com) to augment VScode git commands:

- Repository Manager Summary and Statistics
- Fetch, pull, push
- Commit, amend
- Create and delete branches and tags
- Create and delete remote repos
- Checkout branch or revision
- Cherry-pick, revert
- Merge
- Rebase
- Stashes
- Submodules
- Interactive rebase
- Blame
- Browse the repository file tree at any commit
- Intuitive merge conflict resolving
- Restore lost commits with Reflog
- See stashes right in the commit list
- Git-flow
- Git LFS
- GPG

---


developmenttools.mdx

## git logo

![gitlogo](/img/gitlogo.png)

:::info
[`Git`](https://git-scm.com/) is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

`Git`has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.
:::

---

## GitHub logo

![gitHublogo](/img/gitHublogo.png)

:::info
All developers need a `GitHub` account. It is a Microsoft company
"[`GitHub`](https://github.com/) is a Distributed Version Control Systems (DVCS) enabling multiple developers or teams to work separately without having an impact on the work of others. GitHub is a central online web hosted project repository for all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. Teams can view history of all changes and go back to previous file versions."

GitHub is a unified source of truth helping to answer the questions *who* changed *what*, *where*, *when*, and *why*?
:::

---

### GitHub Desktop

[GitHub Desktop](https://desktop.github.com/)

[What is GitHub Desktop and who is it for?
](https://github.com/desktop/desktop/blob/development/docs/process/what-is-desktop.md#what-is-github-desktop-and-who-is-it-for)

---

## Fork App

[Fork App](colophon#fork) is a quick way to check repository branches, commits, file changes, and much more.

---

glossary.mdx

==[git](developmenttools#git)==

==[git-workflow](https://gist.github.com/datagrok/d1650d85496cd509d42b8656d30410cf)==

==[What is git](https://www.git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)==

 ### GitHub

==[GitHub](developmenttools#github)==

==[What is GitHub](https://www.w3schools.com/whatis/whatis_github.asp)==

### Central Repository
Central Repository is a *git* repepository located at *GitHub*

### ==Clone==
User makes the changes and push back to their own forked repository.

### ==Fork==
[Fork](https://git-fork.com)
User creates a copy of a private repository to their own GitHub account. Changes can not be directly applied to the forked repository. A pull request must be made.

### ==Pull Request==
A user sends the changes to the forked repository. This process is called as Pull Request in Git. The repository guardian and possible other team members are notified of the pull request. They will accept or modify the changes and apply them to the forked repository, or reject the them.

---

